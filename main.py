from aiogram import Bot, Dispatcher, executor, types
import logging
import notajaxparser as parser
from config import BOT_TOKEN
from sqlworker import SQLighter

bot_obj=Bot(token=BOT_TOKEN)
bot=Dispatcher(bot_obj)
db = SQLighter('db.db')
clear_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add(types.KeyboardButton(" "))
logging.basicConfig(level=logging.INFO)
menu=types.ReplyKeyboardMarkup(resize_keyboard=True)
button1=types.KeyboardButton("–£–∑–Ω–∞—Ç—å —Å–≤–æ—ë –ø–æ–ª–æ–∂–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü–µ")
edBut1=types.KeyboardButton("–í—ã–±—Ä–∞—Ç—å –∏–Ω—Å—Ç–∏—Ç—É—Ç")
edBut2=types.KeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä")
menu.add(button1)
menu.row(edBut1,edBut2)


def generate_inline_selector():
    inline_kb = types.InlineKeyboardMarkup()
    inline_btn_1 = types.InlineKeyboardButton('–ò–Ω—Å—Ç–∏—Ç—É—Ç –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –Ω–∞—É–∫ –∏ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏', callback_data='ienm')
    inline_btn_2 = types.InlineKeyboardButton('–ò–Ω—Å—Ç–∏—Ç—É—Ç –Ω–æ–≤—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π', callback_data='inmt')
    inline_btn_3 = types.InlineKeyboardButton('–ò–Ω—Å—Ç–∏—Ç—É—Ç —Ä–∞–¥–∏–æ—ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π - –†—Ç–§', callback_data='rtf')
    inline_btn_4 = types.InlineKeyboardButton('–ò–Ω—Å—Ç–∏—Ç—É—Ç —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã', callback_data='isa')
    inline_btn_6 = types.InlineKeyboardButton('–ò–Ω—Å—Ç–∏—Ç—É—Ç —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∫—É–ª—å—Ç—É—Ä—ã, —Å–ø–æ—Ä—Ç–∞ –∏ –º–æ–ª–æ–¥–µ–∂–Ω–æ–π –ø–æ–ª–∏—Ç–∏–∫–∏', callback_data='ipe')
    inline_btn_7 = types.InlineKeyboardButton('–ò–Ω—Å—Ç–∏—Ç—É—Ç —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è', callback_data='ifo')
    inline_btn_8 = types.InlineKeyboardButton('–ò–Ω—Å—Ç–∏—Ç—É—Ç —ç–∫–æ–Ω–æ–º–∏–∫–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è', callback_data='ieu')
    inline_btn_9 = types.InlineKeyboardButton('–£—Ä–∞–ª—å—Å–∫–∏–π –≥—É–º–∞–Ω–∏—Ç–∞—Ä–Ω—ã–π –∏–Ω—Å—Ç–∏—Ç—É—Ç', callback_data='ugi')
    inline_btn_10 = types.InlineKeyboardButton('–£—Ä–∞–ª—å—Å–∫–∏–π —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π –∏–Ω—Å—Ç–∏—Ç—É—Ç', callback_data='uei')
    inline_btn_11 = types.InlineKeyboardButton('–§–∏–∑–∏–∫–æ-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∏–Ω—Å—Ç–∏—Ç—É—Ç', callback_data='fti')
    inline_btn_12 = types.InlineKeyboardButton('–•–∏–º–∏–∫–æ-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∏–Ω—Å—Ç–∏—Ç—É—Ç', callback_data='xti')
    inline_kb.add(inline_btn_1)
    inline_kb.add(inline_btn_2)
    inline_kb.add(inline_btn_3)
    inline_kb.add(inline_btn_4)
    inline_kb.add(inline_btn_6)
    inline_kb.add(inline_btn_7)
    inline_kb.add(inline_btn_8)
    inline_kb.add(inline_btn_9)
    inline_kb.add(inline_btn_10)
    inline_kb.add(inline_btn_11)
    inline_kb.add(inline_btn_12)
    return inline_kb


inline_kb=generate_inline_selector()


def RepresentsInt(s):
    try:
        int(s)
        return True
    except ValueError:
        return False

@bot.message_handler(commands=['start'])
async def init_bot(message: types.Message):
    markup=types.ReplyKeyboardMarkup(resize_keyboard=True)
    button1=types.KeyboardButton("–ù–∞—á–∞—Ç—å —É–∑–Ω–∞–≤–∞—Ç—å —Å–≤–æ—ë –ø–æ–ª–æ–∂–µ–Ω–∏–µ!")
    markup.add(button1)
    if message.chat.username==None:
        name=message.chat.first_name
    else:
        name = message.chat.username
    if not db.user_exists(message.chat.id):
        db.add_user(message.chat.id,name)
    await message.answer("–ü—Ä–∏–≤–µ—Ç üëã, —è –±–æ—Ç –ø—Ä–æ–≤–µ—Ä—è—é—â–∏–π –≤–∞—à–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –≤ –∫–æ–Ω–∫—É—Ä—Å–Ω–æ–º —Å–ø–∏—Å–∫–µ –£–†–§–£ —Å—Ä–µ–¥–∏ —Ç–µ—Ö, –∫—Ç–æ –ø–æ–¥–∞–ª —Å–æ–≥–ª–∞—Å–∏–µ.",reply_markup=markup)

@bot.message_handler(content_types=['text'])
async def get_text_messages(message):
    if message.chat.type=="private":
        if message.text == "–ù–∞—á–∞—Ç—å —É–∑–Ω–∞–≤–∞—Ç—å —Å–≤–æ—ë –ø–æ–ª–æ–∂–µ–Ω–∏–µ!" or message.text == "–ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä":
            if not db.user_exists(message.chat.id):
                db.add_user(message.chat.id,message.chat.username)
            db.update_status(message.chat.id,True)
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä:",reply_markup=clear_markup)
        elif message.text == "/help":
            await message.answer("–†–∞—Å—Å–∫–∞–∂—É –æ –º–µ—Ç—Å—Ç–µ –≤ —Ä–µ–π–Ω–∏–≥–µ –∏–ª–∏ –ø—Ä–æ –§–ò–ò–¢ /fiit.üë∫ –ò—Å–ø–æ–ª—å–∑—É–π –∫–ª–≤–∞–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
        elif message.text == "/fiit":
            await message.answer("–§–ò–ò–¢ - –∫—Ä—É—Ç–∞. @drannik_m —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç. https://fiit-urfu.ru")
        elif message.text == "–£–∑–Ω–∞—Ç—å —Å–≤–æ—ë –ø–æ–ª–æ–∂–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü–µ":
            if not db.user_exists(message.chat.id):
                db.add_user(message.chat.id,message.chat.username)
            user=db.get_user(message.chat.id)
            print(user[5])
            if user[2]==None:
                await message.answer("–î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç–∏—Ç—É—Ç. ‚ÜôÔ∏è ")
            elif user[3] == None:
                await message.answer("–î–ª—è –Ω–∞—á–∞–ª–∞ –∏–∑–º–∏–Ω–∏—Ç–µ –Ω–æ–º–µ—Ä. ‚ÜòÔ∏è")
            else:
                await message.answer("üåê –ò—â–µ–º –≤–∞—Å –≤ —Å–ø–∏—Å–∫–∞—Ö...")
                await message.answer(parser.get_abit_status(user[2],user[3]))
        elif message.text == "–í—ã–±—Ä–∞—Ç—å –∏–Ω—Å—Ç–∏—Ç—É—Ç":
            await message.answer("–ù–∞ –∫–∞–∫–æ–π –∏–Ω—Å—Ç–∏—Ç—É—Ç –≤—ã –ø–æ–¥–∞–ª–∏ —Å–æ–≥–ª–∞—Å–∏–µ?", reply_markup=inline_kb)
        else:
            if not db.user_exists(message.chat.id):
                db.add_user(message.chat.id,message.chat.username)
            if db.get_user(message.chat.id)[4]:
                text=message.text.strip()
                if RepresentsInt(text):
                    db.update_fio(message.chat.id,text)
                    db.update_status(message.chat.id, False)
                    await message.answer( "üëå –û–∫.",reply_markup=menu)
                else:
                    await message.answer( "‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –Ω–æ–º–µ—Ä,–ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            else:
                await message.answer( "–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é üò•. –ò—Å–ø–æ–ª—å–∑—É–π –∫–ª–∞–≤–∏—É—Ç—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")


@bot.callback_query_handler()
async def process_callback_kb1btn1(callback_query: types.CallbackQuery):
    code = callback_query.data

    if not db.user_exists(callback_query.message.chat.id):
        db.add_user(callback_query.message.chat.id, callback_query.message.chat.username)
    if code=="ienm":
        db.update_inst(callback_query.message.chat.id,"–ò–Ω—Å—Ç–∏—Ç—É—Ç –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –Ω–∞—É–∫ –∏ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏")
    elif code=="inmt":
        db.update_inst(callback_query.message.chat.id,"–ò–Ω—Å—Ç–∏—Ç—É—Ç –Ω–æ–≤—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π")
    elif code=="rtf":
        db.update_inst(callback_query.message.chat.id,"–ò–Ω—Å—Ç–∏—Ç—É—Ç —Ä–∞–¥–∏–æ—ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π - –†—Ç–§")
    elif code=="isa":
        db.update_inst(callback_query.message.chat.id,"–ò–Ω—Å—Ç–∏—Ç—É—Ç —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã")
    elif code=="ipe":
        db.update_inst(callback_query.message.chat.id,"–ò–Ω—Å—Ç–∏—Ç—É—Ç —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∫—É–ª—å—Ç—É—Ä—ã, —Å–ø–æ—Ä—Ç–∞ –∏ –º–æ–ª–æ–¥–µ–∂–Ω–æ–π –ø–æ–ª–∏—Ç–∏–∫–∏")
    elif code=="ifo":
        db.update_inst(callback_query.message.chat.id,"–ò–Ω—Å—Ç–∏—Ç—É—Ç —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è")
    elif code=="ieu":
        db.update_inst(callback_query.message.chat.id,"–ò–Ω—Å—Ç–∏—Ç—É—Ç —ç–∫–æ–Ω–æ–º–∏–∫–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
    elif code=="ugi":
        db.update_inst(callback_query.message.chat.id,"–£—Ä–∞–ª—å—Å–∫–∏–π –≥—É–º–∞–Ω–∏—Ç–∞—Ä–Ω—ã–π –∏–Ω—Å—Ç–∏—Ç—É—Ç")
    elif code=="uei":
        db.update_inst(callback_query.message.chat.id,"–£—Ä–∞–ª—å—Å–∫–∏–π —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π –∏–Ω—Å—Ç–∏—Ç—É—Ç")
    elif code=="fti":
        db.update_inst(callback_query.message.chat.id,"–§–∏–∑–∏–∫–æ-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∏–Ω—Å—Ç–∏—Ç—É—Ç")
    elif code=="xti":
        db.update_inst(callback_query.message.chat.id,"–•–∏–º–∏–∫–æ-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∏–Ω—Å—Ç–∏—Ç—É—Ç")

    await bot_obj.edit_message_text(chat_id=callback_query.message.chat.id,message_id=callback_query.message.message_id,reply_markup=None,text="üëå –í—ã–±–æ—Ä –∑–∞—á—Ç—ë–Ω!")
    await bot_obj.answer_callback_query(callback_query.id)


if __name__ == '__main__':
    executor.start_polling(bot, skip_updates=True)